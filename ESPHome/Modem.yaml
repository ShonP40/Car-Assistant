####################################################################################################
#####                                    Car Assistant                                         #####
#####                  Repository: https://github.com/ShonP40/Car-Assistant                    #####
####################################################################################################
##### Purpose: Modem and GPS config & sensors                                                  #####
####################################################################################################
##### NOTE:                                                                                    #####
##### - Make changes ONLY if absolutely necessary and you have the required knowledge.         #####
##### - For normal system use, modifications to this file are NOT required.                    #####
####################################################################################################

external_components:
  - source: github://pr#6721 # Docs: https://deploy-preview-4056--esphome.netlify.app/components/modem.html
    components: [ network, modem, watchdog ]
    refresh: 10min

http_request:

modem:
  id: atmodem
  rx_pin: ${modem_rx_pin}
  tx_pin: ${modem_tx_pin}
  baud_rate: 115200
  power_pin:
    number: ${modem_power_pin}
    inverted: ${modem_power_pin_inverted}
  status_pin: ${modem_status_pin}
  model: ${modem_model}
  apn: ${modem_apn}
  pin_code: ${modem_pin_code}
  enable_on_boot: true
  enable_cmux: true
  reboot_timeout: 5min
  on_not_responding:
    - logger.log: "Modem not responding"
  on_connect:
    - logger.log: "Modem connected"
    - http_request.send:
        method: get
        url: "http://api.ipify.org"
        capture_response: true
        on_response:
          then:
            - lambda: id(${id}_public_ip).publish_state(body);
    - lambda: |-
        auto res = id(atmodem).send_at("AT+CSPN?");
        std::string output = res.output;

        auto first_quote = output.find('"');
        auto second_quote = output.find('"', first_quote + 1);

        std::string carrier = "";
        if (first_quote != std::string::npos && second_quote != std::string::npos) {
            carrier = output.substr(first_quote + 1, second_quote - first_quote - 1);
        }

        id(${id}_network_operator).publish_state(carrier);
    - lambda: |-
        auto addrs = id(atmodem).get_ip_addresses();
        std::string ip_str = "N/A";
        if (!addrs.empty()) {
          ip_str = addrs[0].str();
        }
        id(${id}_cellular_ip).publish_state(ip_str);
  on_disconnect:
    - logger.log: "Modem disconnected"
  nmea:
    id: nmea_data
  use_address: ${modem_address}

gps:
  uart_id: nmea_data
  latitude:
    name: "${friendly_name} Latitude"
  longitude:
    name: "${friendly_name} Longitude"
  altitude:
    name: "${friendly_name} Altitude"
  speed:
    name: "${friendly_name} Speed"
  course:
    name: "${friendly_name} Course"
  satellites:
    name: "${friendly_name} Satellites"
  hdop:
    name: "${friendly_name} Horizontal Dilution Of Precision"
    id: ${id}_hdop
    icon: mdi:map-marker-distance

text_sensor:
  - platform: modem
    network_type:
      name: "${friendly_name} Network Type"
      entity_category: "diagnostic"
      icon: mdi:signal
    signal_strength:
      name: "${friendly_name} Signal Strength"
      entity_category: "diagnostic"
  - platform: template
    name: "${friendly_name} Public IP"
    id: ${id}_public_ip
    entity_category: "diagnostic"
    icon: mdi:earth
  - platform: template
    name: "${friendly_name} Network Operator"
    id: ${id}_network_operator
    entity_category: "diagnostic"
    icon: mdi:sim
  - platform: template
    name: "${friendly_name} Cellular IP"
    id: ${id}_cellular_ip
    entity_category: "diagnostic"
    icon: mdi:wan

sensor:
  - platform: modem
    rssi:
      name: "${friendly_name} RSSI"
      entity_category: "diagnostic"
    ber:
      name: "${friendly_name} Bit Error Rate"
      entity_category: "diagnostic"
  - platform: template
    name: "${friendly_name} GPS Accuracy"
    unit_of_measurement: "m"
    accuracy_decimals: 1
    icon: mdi:crosshairs-gps
    lambda: return id(${id}_hdop).state * 5.0;

switch:
  - platform: gpio
    id: flight_mode
    name: "${friendly_name} Flight Mode"
    restore_mode: ALWAYS_ON
    pin:
      number: ${modem_flight_mode_pin}
    internal: true
    entity_category: "diagnostic"
  - platform: modem
    gnss:
      name: "${friendly_name} GNSS"
      restore_mode: ALWAYS_ON

button:
  - platform: template
    name: "${friendly_name} Restart Modem"
    entity_category: "config"
    icon: mdi:restart-alert
    on_press:
      - modem.reset:

binary_sensor:
  - platform: template
    name: "${friendly_name} GNSS Status"
    id: ${id}_gnss_status
    icon: mdi:crosshairs-question
    entity_category: "diagnostic"
    device_class: "problem"
    lambda: |-
      auto res = id(atmodem).send_at("AT+CGNSSINFO");
      std::string output = res.output;
      bool no_fix = output.find(",,,,,,,") != std::string::npos;
      return no_fix;